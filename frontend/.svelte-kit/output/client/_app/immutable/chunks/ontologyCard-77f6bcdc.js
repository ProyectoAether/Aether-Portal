import{S as Q,i as T,s as W,d as U,v as X,p as w,c as R,y as x,q as v,r as C,f as A,z as N,l as p,u as l,x as b,g as L,M as f,A as q,G as J,N as K}from"./index-60976d40.js";import{b as D}from"./paths-596d0288.js";import{f as G}from"./utils-7a93c7c6.js";const _="src/lib/components/card/ontologyCard.svelte";function B(o){let e,n,i;const g={c:function(){e=w("figure"),n=w("img"),this.h()},l:function(r){e=v(r,"FIGURE",{class:!0});var s=C(e);n=v(s,"IMG",{src:!0,height:!0,width:!0,alt:!0,class:!0}),s.forEach(p),this.h()},h:function(){K(n.src,i=o[1])||l(n,"src",i),l(n,"height","100px"),l(n,"width","100px"),l(n,"alt","ontology-icon"),l(n,"class","rounded-xl"),b(n,_,15,3,362),l(e,"class","px-10 pt-10"),b(e,_,14,2,330)},m:function(r,s){L(r,e,s),f(e,n)},p:function(r,s){s&2&&!K(n.src,i=r[1])&&l(n,"src",i)},d:function(r){r&&p(e)}};return U("SvelteRegisterBlock",{block:g,id:B.name,type:"if",source:"(14:1) {#if logo}",ctx:o}),g}function M(o){let e,n,i,g,c,r,s,u,m=(o[3]||"")+"",O,t,y,E=(o[4]||"")+"",S,j,a=o[1]&&B(o);const V={c:function(){e=w("a"),a&&a.c(),n=R(),i=w("div"),g=w("h2"),c=x(o[2]),r=R(),s=w("div"),u=w("span"),O=x(m),t=R(),y=w("span"),S=x(E),this.h()},l:function(d){e=v(d,"A",{href:!0,class:!0});var h=C(e);a&&a.l(h),n=A(h),i=v(h,"DIV",{class:!0});var k=C(i);g=v(k,"H2",{class:!0});var z=C(g);c=N(z,o[2]),z.forEach(p),r=A(k),s=v(k,"DIV",{class:!0});var I=C(s);u=v(I,"SPAN",{});var F=C(u);O=N(F,m),F.forEach(p),t=A(I),y=v(I,"SPAN",{class:!0});var H=C(y);S=N(H,E),H.forEach(p),I.forEach(p),k.forEach(p),h.forEach(p),this.h()},h:function(){l(g,"class","card-title"),b(g,_,19,2,520),b(u,_,21,3,592),l(y,"class","italic text-base-content line-clamp-6"),b(y,_,22,3,622),l(s,"class","p-4 line-clamp-6"),b(s,_,20,2,558),l(i,"class","card-body items-center text-center"),b(i,_,18,1,469),l(e,"href",j=D+"/ontologies/previews?uri="+G(o[0])),l(e,"class","card shadow-xl hover:shadow-sm hover:bg-base-200"),b(e,_,9,0,197)},m:function(d,h){L(d,e,h),a&&a.m(e,null),f(e,n),f(e,i),f(i,g),f(g,c),f(i,r),f(i,s),f(s,u),f(u,O),f(s,t),f(s,y),f(y,S)},p:function(d,[h]){d[1]?a?a.p(d,h):(a=B(d),a.c(),a.m(e,n)):a&&(a.d(1),a=null),h&4&&q(c,d[2]),h&8&&m!==(m=(d[3]||"")+"")&&q(O,m),h&16&&E!==(E=(d[4]||"")+"")&&q(S,E),h&1&&j!==(j=D+"/ontologies/previews?uri="+G(d[0]))&&l(e,"href",j)},i:J,o:J,d:function(d){d&&p(e),a&&a.d()}};return U("SvelteRegisterBlock",{block:V,id:M.name,type:"component",source:"",ctx:o}),V}function Y(o,e,n){let{$$slots:i={},$$scope:g}=e;X("OntologyCard",i,[]);let{uri:c}=e,{logo:r}=e,{title:s}=e,{label:u}=e,{description:m}=e;o.$$.on_mount.push(function(){c===void 0&&!("uri"in e||o.$$.bound[o.$$.props.uri])&&console.warn("<OntologyCard> was created without expected prop 'uri'"),r===void 0&&!("logo"in e||o.$$.bound[o.$$.props.logo])&&console.warn("<OntologyCard> was created without expected prop 'logo'"),s===void 0&&!("title"in e||o.$$.bound[o.$$.props.title])&&console.warn("<OntologyCard> was created without expected prop 'title'"),u===void 0&&!("label"in e||o.$$.bound[o.$$.props.label])&&console.warn("<OntologyCard> was created without expected prop 'label'"),m===void 0&&!("description"in e||o.$$.bound[o.$$.props.description])&&console.warn("<OntologyCard> was created without expected prop 'description'")});const O=["uri","logo","title","label","description"];return Object.keys(e).forEach(t=>{!~O.indexOf(t)&&t.slice(0,2)!=="$$"&&t!=="slot"&&console.warn(`<OntologyCard> was created with unknown prop '${t}'`)}),o.$$set=t=>{"uri"in t&&n(0,c=t.uri),"logo"in t&&n(1,r=t.logo),"title"in t&&n(2,s=t.title),"label"in t&&n(3,u=t.label),"description"in t&&n(4,m=t.description)},o.$capture_state=()=>({base:D,uri:c,logo:r,title:s,label:u,description:m,formatURI:G}),o.$inject_state=t=>{"uri"in t&&n(0,c=t.uri),"logo"in t&&n(1,r=t.logo),"title"in t&&n(2,s=t.title),"label"in t&&n(3,u=t.label),"description"in t&&n(4,m=t.description)},e&&"$$inject"in e&&o.$inject_state(e.$$inject),[c,r,s,u,m]}class te extends Q{constructor(e){super(e),T(this,e,Y,M,W,{uri:0,logo:1,title:2,label:3,description:4}),U("SvelteRegisterComponent",{component:this,tagName:"OntologyCard",options:e,id:M.name})}get uri(){throw new Error("<OntologyCard>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'")}set uri(e){throw new Error("<OntologyCard>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'")}get logo(){throw new Error("<OntologyCard>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'")}set logo(e){throw new Error("<OntologyCard>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'")}get title(){throw new Error("<OntologyCard>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'")}set title(e){throw new Error("<OntologyCard>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'")}get label(){throw new Error("<OntologyCard>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'")}set label(e){throw new Error("<OntologyCard>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'")}get description(){throw new Error("<OntologyCard>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'")}set description(e){throw new Error("<OntologyCard>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'")}}export{te as O};
